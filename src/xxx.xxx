document                = grammar !eof
grammar                 = statement*
statement               = !ws expr !eol
expr                    = grammar::value_type / transform
grammar::value_type     = var !_ !eq !_ rules
rules                   = rule !_ !fs !_ rules / rule
rule                    = rule::composite_type / rule::terminal_type
rule::terminal_type     = regexre
rule::composite_type    = predicates
predicates              = predicate !_ predicates / predicate
predicate               = M? var Q?
transform               = filters !_ !ra !_ function
filters                 = filter !_ filters / filter
filter                  = il / send / quant / call / product
function                = call / product
il                      = !lb var !rb
send                    = !amp
quant                   = var Q
call                    = var !dot var
product                 = var

lb          = /\A\{/
rb          = /\A\}/
dot         = /\A\./
amp         = /\A&/
fs          = /\A\//
qm          = /\A\?/
_           = /\A[ \t]+/
eof         = /\A\z/
eol         = /\A\s*(?:$|\z)/
M           = /\A[!>~]/
Q           = /\A[*?+]/
var         = /\A(?:::|\w)*\w/
ws          = /\A\s*/
ra          = /\A->/
regexre     = /\A\/((?:\\.|[^\/])*)\//
eq          = /\A=/
