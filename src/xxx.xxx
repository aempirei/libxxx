document                = grammar !eof
grammar                 = statement*
statement               = !ws expr !eol
expr                    = entry / transform
entry                   = var !_ !eq !_ rules
rules                   = rule !_ !fs !_ rules / rule
rule                    = composite / terminal
terminal                = regex
composite               = predicates
predicates              = predicate !_ predicates / predicate
predicate               = M? var Q?
transform               = functor / product
functor                 = functor_filters !_ !ra !_ call
product                 = product_filters !_ !ra !_ var
functor_filters         = functor_filter !_ functor_filters / functor_filter
functor_filter          = il / send / call / set / var
product_filters         = product_filter !_ product_filters / product_filter
product_filter          = il / send / call / option / var
il                      = !lb var !rb
send                    = !amp
call                    = var !dot var
option                  = var !question
set                     = var Q

lb          = /\A\{/
rb          = /\A\}/
dot         = /\A\./
amp         = /\A&/
fs          = /\A\//
question    = /\A\?/
star        = /\A\*/
plus        = /\A\+/
_           = /\A[ \t]+/
eof         = /\A\z/
eol         = /\A\s*(?:$|\z)/
M           = /\A[!>~]/
Q           = /\A[?*+]/
var         = /\A(?:::|\w)*\w/
ws          = /\A\s*/
ra          = /\A->/
regex       = /\A\/((?:\\.|[^\/])*)\//
eq          = /\A=/
